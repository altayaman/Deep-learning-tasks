## MODEL 1
## ======================================================================================
batch_size_ = 64   # 64

model = Sequential()
# --------------------------------------------------------------------------------------
# ---- Embedding layer -----------------------------------------------------------------
embedding_layer = Embedding(top_words, 
                            embedding_vecor_length, 
                            weights=[embedding_matrix], 
                            input_length = max_description_length,
                            trainable=False)
model.add(embedding_layer)

## LSTM 1
## ======================================================================================
LSTM_1 = LSTM(128,return_sequences=False)
model.add(LSTM_1)

## Dense 1
## ======================================================================================
Dense_1 = Dense(128,activation='sigmoid')
#model.add(Dense_1)

## Output classes layer
## ======================================================================================
model.add(Dense(len(nb_classes), activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])  # try loss=categorical_crossentropy
print(model.summary())

#Accuracy: loss: 0.0814 - acc: 0.9739 - val_loss: 0.0824 - val_acc: 0.9740


## MODEL 2
## ======================================================================================
batch_size_ = 64   # 64

model = Sequential()
# --------------------------------------------------------------------------------------
# ---- Embedding layer -----------------------------------------------------------------
embedding_layer = Embedding(top_words, 
                            embedding_vecor_length, 
                            weights=[embedding_matrix], 
                            input_length = max_description_length,
                            trainable=False)
model.add(embedding_layer)

## LSTM 1
## ======================================================================================
LSTM_1 = LSTM(128,return_sequences=True)
model.add(LSTM_1)

## LSTM 2
## ======================================================================================
LSTM_1 = LSTM(128,return_sequences=False)
model.add(LSTM_1)


## Dense 1
## ======================================================================================
Dense_1 = Dense(128,activation='sigmoid')
#model.add(Dense_1)

## Output classes layer
## ======================================================================================
model.add(Dense(len(nb_classes), activation='softmax'))
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])  # try loss=categorical_crossentropy
print(model.summary())

#Accuracy: loss: 0.0565 - acc: 0.9802 - val_loss: 0.0670 - val_acc: 0.9777